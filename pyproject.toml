[tool.poetry]
name = "mxr"
version = "0.1.0"
description = ""
authors = ["Richie Cahill <richie@tmmworkshop.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "mxr" }]

[tool.poetry.dependencies]
python = "^3.13"
sqlalchemy = "*"
alembic = "*"
psycopg = { extras = ["binary"], version = "*" }
requests = "*"
flask = "*"
gunicorn = "*"

[tool.poetry.group.dev.dependencies]
mypy = "*"
poetry = "*"
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
pytest-xdist = "*"
ruff = "*"
types-requests = "*"

[tool.poetry.scripts]
mxr_update = "tools.update:main"
mxr_run = "tools.run:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
lint.select = ["ALL"]
target-version = "py313"

line-length = 120

lint.ignore = [
    "G004",   # (PERM) This is a performers nit
    "COM812", # (TEMP) conflicts when used with the formatter
    "ISC001", # (TEMP) conflicts when used with the formatter
    "TD003",  # (TEMP) we don't have a issue system yet
    "FIX002", # (TEMP) for now TODOs are our backlog
]

[tool.ruff.lint.per-file-ignores]

"tests/**" = [
    "S101", # (perm) pytest needs asserts
]

"alembic/**" = [
    "INP001", # (perm) having a __init__ causes a lsp problem and is not needed for alembic
    "I001",   # (perm) having a __init__ causes a lsp problem and is not needed for alembic
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.pylint]
max-args = 9

[tool.coverage.run]
source = ["tools"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == \"__main__\":",
]

[tool.pytest.ini_options]
addopts = "-n auto -ra"
# --cov=mxr --cov-report=term-missing --cov-report=xml --cov-report=html --cov-branch
